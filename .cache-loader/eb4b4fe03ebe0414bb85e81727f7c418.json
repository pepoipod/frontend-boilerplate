{"remainingRequest":"/Users/iwamoto/dev/cshool/frontend-boilerplate/node_modules/thread-loader/dist/cjs.js??ref--4-1!/Users/iwamoto/dev/cshool/frontend-boilerplate/node_modules/babel-loader/lib/index.js??ref--4-2!/Users/iwamoto/dev/cshool/frontend-boilerplate/node_modules/core-js/modules/es6.function.name.js","dependencies":[{"path":"/Users/iwamoto/dev/cshool/frontend-boilerplate/node_modules/core-js/modules/es6.function.name.js","mtime":1523240795000},{"path":"/Users/iwamoto/dev/cshool/frontend-boilerplate/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/iwamoto/dev/cshool/frontend-boilerplate/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/iwamoto/dev/cshool/frontend-boilerplate/node_modules/babel-loader/lib/index.js","mtime":1520329890000}],"contextDependencies":[],"result":["var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function get() {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});",{"version":3,"sources":["node_modules/core-js/modules/es6.function.name.js"],"names":["dP","require","f","FProto","Function","prototype","nameRE","NAME","configurable","get","match","e"],"mappings":"AAAA,IAAIA,KAAKC,QAAQ,cAAR,EAAwBC,CAAjC;AACA,IAAIC,SAASC,SAASC,SAAtB;AACA,IAAIC,SAAS,uBAAb;AACA,IAAIC,OAAO,MAAX;;AAEA;AACAA,QAAQJ,MAAR,IAAkBF,QAAQ,gBAAR,KAA6BD,GAAGG,MAAH,EAAWI,IAAX,EAAiB;AAC9DC,gBAAc,IADgD;AAE9DC,OAAK,eAAY;AACf,QAAI;AACF,aAAO,CAAC,KAAK,IAAN,EAAYC,KAAZ,CAAkBJ,MAAlB,EAA0B,CAA1B,CAAP;AACD,KAFD,CAEE,OAAOK,CAAP,EAAU;AACV,aAAO,EAAP;AACD;AACF;AAR6D,CAAjB,CAA/C","file":"es6.function.name.js","sourceRoot":"/Users/iwamoto/dev/cshool/frontend-boilerplate","sourcesContent":["var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n"]}]}